jobs:
- job: 'build'
  pool: 'Win-CPU-2019'
  strategy:
    maxParallel: 2
    matrix:
      debug:
        BuildConfig: 'Debug'
      release:
        BuildConfig: 'RelWithDebInfo'
  variables:
    OrtPackageId: 'Microsoft.ML.OnnxRuntime'
    MsbuildArguments: '-detailedsummary -maxcpucount -consoleloggerparameters:PerformanceSummary'
    OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
  timeoutInMinutes: 60
  workspace:
    clean: all
  steps:    
  - task: UsePythonVersion@0
    inputs: 
      versionSpec: '3.7' 
      addToPath: true 
      architecture: 'x64'

  - task: PythonScript@0
    displayName: 'Generate cmake config'
    inputs:
      scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
      arguments: '--config $(BuildConfig) --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --update --cmake_generator "Visual Studio 16 2019" --build_wheel --use_automl --use_mkldnn --use_openmp --build_shared_lib --enable_onnx_tests'
      workingDirectory: '$(Build.BinariesDirectory)'
     
  - task: VSBuild@1
    displayName: 'Build'
    inputs:
      solution: '$(Build.BinariesDirectory)\$(BuildConfig)\onnxruntime.sln'
      platform: 'x64'
      configuration: $(BuildConfig)
      msbuildArgs: $(MsbuildArguments)
      msbuildArchitecture: 'x64'
      maximumCpuCount: true
      logProjectEvents: false
      workingFolder: '$(Build.BinariesDirectory)\$(BuildConfig)'
      createLogFile: true

  - task: PythonScript@0
    displayName: 'Build wheel'
    inputs:
      scriptPath: '$(Build.SourcesDirectory)\setup.py'
      arguments: 'bdist_wheel'
      workingDirectory: '$(Build.BinariesDirectory)\$(BuildConfig)\$(BuildConfig)'

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
    inputs:
      sourceFolder: $(Build.BinariesDirectory)\$(BuildConfig)
      Contents: |
       $(BuildConfig)\*.exe
       $(BuildConfig)\*.dll
       $(BuildConfig)\*.pdb
       $(BuildConfig)\testdata\**
       $(BuildConfig)\**\*.whl
       external\protobuf\cmake\$(BuildConfig)\*.exe
       external\protobuf\cmake\$(BuildConfig)\*.dll
      TargetFolder: $(Build.ArtifactStagingDirectory)

  - task: CopyFiles@2
    displayName: 'Copy VC DLLs to: $(Build.ArtifactStagingDirectory)'
    inputs:
      sourceFolder: $(VcDllPath)
      Contents: |
       **\*.dll
      TargetFolder: $(Build.ArtifactStagingDirectory)\$(BuildConfig)

  - task: CopyFiles@2
    displayName: 'Copy VC DLLs to: $(Build.ArtifactStagingDirectory)'
    inputs:
      sourceFolder: $(VcDllPath)
      Contents: |
       **\*.dll
      TargetFolder: $(Build.ArtifactStagingDirectory)\external\protobuf\cmake\$(BuildConfig)

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Pipeline Artifact'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    condition: succeeded()

- job: 'test'
  pool: 'Win-CPU-2019'
  dependsOn: 'build'
  timeoutInMinutes: 60
  variables:
    OrtPackageId: 'Microsoft.ML.OnnxRuntime'
    OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    EnvSetupScript: setup_env.bat
    buildArch: x64
    setVcvars: true
  workspace:
    clean: all      
  steps:
  - task: DownloadPipelineArtifact@2
    displayName: 'Download Pipeline Artifact'
    inputs:      
      targetPath: '$(Build.BinariesDirectory)'

  - script: |
     move build.debug Debug
     move build.release RelWithDebInfo
   
    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Command Line Script'
   
  - template: templates/set-test-data-variables-step.yml

  - task: NuGetToolInstaller@0
    displayName: Use Nuget 4.9
    inputs:
      versionSpec: 4.9.4

  - task: PowerShell@2
    displayName: 'Download AzCopy (used for download test data script)'
    inputs:
      targetType: 'inline'
      script: |
        Invoke-WebRequest -OutFile $(Build.BinariesDirectory)\azcopy.exe https://onnxruntimetestdata.blob.core.windows.net/models/azcopy.exe

  - task: BatchScript@1
    displayName: 'setup env'
    inputs:
      filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\$(EnvSetupScript)'
      modifyEnvironment: true
      workingFolder: '$(Build.BinariesDirectory)'

  - script: |
     python -m pip install -q pyopenssl setuptools wheel numpy     
   
    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Install python modules'        

  - task: PythonScript@0
    displayName: 'Download test data'
    inputs:
      scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\github\download_test_data.py'
      arguments: --test_data_url $(TestDataUrl) --build_dir $(Build.BinariesDirectory)
      workingDirectory: $(Build.BinariesDirectory)

  - task: DotNetCoreCLI@2
    displayName: 'Restore nuget packages'
    inputs:
      command: restore
      projects: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
      configuration: 'RelWithDebInfo'
      arguments: '--configuration RelWithDebInfo -p:Platform="Any CPU" -p:OrtPackageId=$(OrtPackageId)'
      workingDirectory: '$(Build.SourcesDirectory)\csharp'      

  - task: DotNetCoreCLI@2
    displayName: 'Test C# RelWithDebInfo'
    inputs:
      command: test
      projects: '$(Build.SourcesDirectory)\csharp\test\Microsoft.ML.OnnxRuntime.Tests\Microsoft.ML.OnnxRuntime.Tests.csproj'
      configuration: 'RelWithDebInfo'          
      arguments: '--configuration RelWithDebInfo -p:Platform="Any CPU" -p:OnnxRuntimeBuildDirectory="$(Build.BinariesDirectory)" -p:OrtPackageId=$(OrtPackageId)'
      workingDirectory: '$(Build.SourcesDirectory)\csharp'

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.BinariesDirectory)\Debug\Debug'
    inputs:
      sourceFolder: $(Build.SourcesDirectory)\onnxruntime\test\python
      Contents: '**'       
      TargetFolder: $(Build.BinariesDirectory)\Debug\Debug

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo'
    inputs:
      sourceFolder: $(Build.SourcesDirectory)\onnxruntime\test\python
      Contents: '**'
      TargetFolder: $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo

  - script: |
     mklink  /D /J $(Build.BinariesDirectory)\Debug\models $(Build.BinariesDirectory)\models  
     if exist automl_featurizers_unittests.exe .\automl_featurizers_unittests.exe
     if %ERRORLEVEL% neq 0 exit /b %ERRORLEVEL%
     if exist onnxruntime_mlas_test.exe .\onnxruntime_mlas_test.exe
     if %ERRORLEVEL% neq 0 exit /b %ERRORLEVEL%
     if exist onnxruntime_shared_lib_test.exe .\onnxruntime_shared_lib_test.exe
     if %ERRORLEVEL% neq 0 exit /b %ERRORLEVEL%
     if exist onnxruntime_test_all.exe .\onnxruntime_test_all.exe
     if %ERRORLEVEL% neq 0 exit /b %ERRORLEVEL%
     if exist opaque_api_test.exe .\opaque_api_test.exe
     if %ERRORLEVEL% neq 0 exit /b %ERRORLEVEL%
     DIR dist\ /S /B > wheel_filename_file
     set /p WHEEL_FILENAME=<wheel_filename_file
     del wheel_filename_file
     python.exe -m pip install -q --upgrade %WHEEL_FILENAME%
     python $(Build.SourcesDirectory)\tools\ci_build\build.py --config Debug --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --test --cmake_generator "Visual Studio 16 2019"  --use_mkldnn --build_wheel --enable_onnx_tests
   
    workingDirectory: '$(Build.BinariesDirectory)\Debug\Debug'
    displayName: 'Run Debug test'

  - script: |
     mklink  /D /J $(Build.BinariesDirectory)\RelWithDebInfo\models $(Build.BinariesDirectory)\models  
     if exist automl_featurizers_unittests.exe .\automl_featurizers_unittests.exe
     if %ERRORLEVEL% neq 0 exit /b %ERRORLEVEL%
     if exist onnxruntime_mlas_test.exe .\onnxruntime_mlas_test.exe
     if %ERRORLEVEL% neq 0 exit /b %ERRORLEVEL%
     if exist onnxruntime_shared_lib_test.exe .\onnxruntime_shared_lib_test.exe
     if %ERRORLEVEL% neq 0 exit /b %ERRORLEVEL%
     if exist onnxruntime_test_all.exe .\onnxruntime_test_all.exe
     if %ERRORLEVEL% neq 0 exit /b %ERRORLEVEL%
     if exist opaque_api_test.exe .\opaque_api_test.exe
     if %ERRORLEVEL% neq 0 exit /b %ERRORLEVEL%
     DIR dist\ /S /B > wheel_filename_file
     set /p WHEEL_FILENAME=<wheel_filename_file
     del wheel_filename_file
     python.exe -m pip install -q --upgrade %WHEEL_FILENAME%
     python $(Build.SourcesDirectory)\tools\ci_build\build.py --config RelWithDebInfo --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --test --cmake_generator "Visual Studio 16 2019"  --use_mkldnn --build_wheel --enable_onnx_tests
   
    workingDirectory: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo'
    displayName: 'Run RelWithDebInfo test'
    
  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    condition: succeeded()      